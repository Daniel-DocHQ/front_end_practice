
//MAKING A CUSTOMIZED ORDER OF ANY PRODUCT
//PLEASE USE customize_test.json FOR TEST SETUP
import { test_data } from '../../fixtures/customize_test.js'
import OrderPage from '../../page_objects/OrderPage.js'
import { get_products } from '../../support/utils/utils.js';

const Order = new OrderPage(test_data)
let products_ids = Order.get_products_ids();
console.log(products_ids)

let url;

before('get products data', () => {
	Order.get_all_products_data()
})


describe("B2C - Purchasing products", () => {

	it('Order page for the product is loaded successfully', () => {
		let link = Order.get_checkout_page_link()

		cy.intercept({ method: 'GET', url: link, }).as('order_page')
		cy.visit(link); cy.wait(2000); cy.reload()
		cy.wait('@order_page')

		// Assert products checkout page
		cy.get('@order_page').should(req => { expect(req.response.statusCode).eq(200) })
		cy.wait(2000)

		// Assert products total price value
		let total_price = Order.get_total_products_price()
		//cy.get('[style="align-items: flex-end;"] > div > h3').contains('Total Price').should('include.text', total_price);

		//if((products_ids.length < 2) && (products_ids.includes('87'))){
		//	cy.get('.green').contains('Next').click();
		//}else{
		// Aknowledge that order needs 5 days to be delivered
		cy.get('input[type="checkbox"]').check({ force: true });
		cy.get('.green').contains('Next').click();
		//}
	})

	it('Number of kits match number of pessengers. Fields are functionall.', () => {
		let products_sum = Order.get_products_sum()

		if ((products_ids.length < 2) && (products_ids.includes('87'))) {
			cy.wait(1500)
		//} else if (products_ids.includes('64')) {
		//	// Select total Number of Kits
		//	Order.set_total_number_of_pessengers(products_sum/2);
		//	cy.get('.green').contains('Next').click();
		//	cy.wait(1500);
		} else {
			Order.set_total_number_of_pessengers(1);
			cy.get('.green').contains('Next').click();
			cy.wait(1500);
		}
	})


	it('Pessenger details can be submitted', () => {
		// Random data is generated by default, 
		// to customise - enter arguments respectively: email, first_name, last_name, date_of_birth
		Order.fill_account_details(test_data[1].email)

		cy.get('input[type="checkbox"]').check({ force: true })
		cy.get('.green').contains('Next').click()
		cy.wait(1500)
	})


	it('Shipping address and phone number details can be submitted', () => {
		// Random data is generated by default, 
		// to customise - enter arguments respectively: country_code, phone, postcode, address, city, country
		Order.fill_shipping_address(test_data[1].country_code, test_data[1].phone) // only random UK number is supported

		cy.get('.green').contains('Next').click()
		cy.wait(1500)
	})


	it('Enter discount code', () => {
		// Discount code
		let discount = test_data[1].discount_code;
		cy.get('input[name="discountCode"]').fill(discount);
		cy.get('.green').contains('Next').click();
		cy.wait(1500)
	})


	it('Payment details can be submitted', () => {

		//cy.intercept({method: 'POST', url: 'https://api-staging.dochq.co.uk/v1/order'}).as('submit_order')


		// Braintree iframe render handler
		//	cy.get('div[icon="5"]').then(($div) => {
		//		if ($div.find('.pink').length >= 1) {
		//			return '.pink';
		//		}
		//			return cy.wait(3000);
		//		})
		//		.then((selector) => {
		//			cy.get(selector).contains('Load Payment').click()
		//		})

		cy.wait(4000);
		// Default fake card data
		Order.fill_payment_data()

		cy.get('.green').contains('Pay Now').click()
		

		cy.request('GET', '/confirmation?shortToken*').as('@order_id');
		cy.wait('@order_id')
		cy.get('@order_id').then(({request}) => {
			url = request.url;
		})

		console.log(url)
	})


	it('Purchasing confirmation and order data save', () => {
		cy.get('div.row.no-margin > b').should('have.text', "Thank you for completing your purchase!")

		Order.write_order_data() //cypress/fixtures/order_list.json
		Order.write_user_data()  //cypress/fixtures/user.json
	})
})